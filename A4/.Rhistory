data = val_df,
times = eval_times
)
figures$decision_curve
source('pub_figures.R')
figures <- create_publication_figures(
baseline_model = baseline_model,
biomarker_model = model,
auc_summary = summary_df[summary_df$time > 2,],
data = val_df,
times = eval_times
)
figures$decision_curve
source('pub_figures.R')
figures <- create_publication_figures(
baseline_model = baseline_model,
biomarker_model = model,
auc_summary = summary_df[summary_df$time > 2,],
data = val_df,
times = eval_times
)
figures$decision_curve
source('pub_figures.R')
figures <- create_publication_figures(
baseline_model = baseline_model,
biomarker_model = model,
auc_summary = summary_df[summary_df$time > 2,],
data = val_df,
times = eval_times
)
figures$decision_curve
source('pub_figures.R')
figures <- create_publication_figures(
baseline_model = baseline_model,
biomarker_model = model,
auc_summary = summary_df[summary_df$time > 2,],
data = val_df,
times = eval_times
)
figures$decision_curve
source('pub_figures.R')
figures <- create_publication_figures(
baseline_model = baseline_model,
biomarker_model = model,
auc_summary = summary_df[summary_df$time > 2,],
data = val_df,
times = eval_times
)
figures$decision_curve
source('pub_figures.R')
figures <- create_publication_figures(
baseline_model = baseline_model,
biomarker_model = model,
auc_summary = summary_df[summary_df$time > 2,],
data = val_df,
times = eval_times
)
figures$decision_curve
source('pub_figures.R')
figures <- create_publication_figures(
baseline_model = baseline_model,
biomarker_model = model,
auc_summary = summary_df[summary_df$time > 2,],
data = val_df,
times = eval_times
)
figures$decision_curve
source('pub_figures.R')
figures <- create_publication_figures(
baseline_model = baseline_model,
biomarker_model = model,
auc_summary = summary_df[summary_df$time > 2,],
data = val_df,
times = eval_times
)
source('pub_figures.R')
figures <- create_publication_figures(
baseline_model = baseline_model,
biomarker_model = model,
auc_summary = summary_df[summary_df$time > 2,],
data = val_df,
times = eval_times
)
source('pub_figures.R')
figures <- create_publication_figures(
baseline_model = baseline_model,
biomarker_model = model,
auc_summary = summary_df[summary_df$time > 2,],
data = val_df,
times = eval_times
)
figures$decision_curve
source('pub_figures.R')
figures <- create_publication_figures(
baseline_model = baseline_model,
biomarker_model = model,
auc_summary = summary_df[summary_df$time > 2,],
data = val_df,
times = eval_times
)
figures$decision_curve
source('pub_figures.R')
figures <- create_publication_figures(
baseline_model = baseline_model,
biomarker_model = model,
auc_summary = summary_df[summary_df$time > 2,],
data = val_df,
times = eval_times
)
figures$decision_curve
source('pub_figures.R')
figures <- create_publication_figures(
baseline_model = baseline_model,
biomarker_model = model,
auc_summary = summary_df[summary_df$time > 2,],
data = val_df,
times = eval_times
)
figures$decision_curve
source('pub_figures.R')
figures <- create_publication_figures(
baseline_model = baseline_model,
biomarker_model = model,
auc_summary = summary_df[summary_df$time > 2,],
data = val_df,
times = eval_times
)
figures$decision_curve
source('pub_figures.R')
figures <- create_publication_figures(
baseline_model = baseline_model,
biomarker_model = model,
auc_summary = summary_df[summary_df$time > 2,],
data = val_df,
times = eval_times
)
source('pub_figures.R')
figures <- create_publication_figures(
baseline_model = baseline_model,
biomarker_model = model,
auc_summary = summary_df[summary_df$time > 2,],
data = val_df,
times = eval_times
)
figures$decision_curve
source('pub_figures.R')
figures <- create_publication_figures(
baseline_model = baseline_model,
biomarker_model = model,
auc_summary = summary_df[summary_df$time > 2,],
data = val_df,
times = eval_times
)
figures$decision_curve
source('pub_figures.R')
figures <- create_publication_figures(
baseline_model = baseline_model,
biomarker_model = model,
auc_summary = summary_df[summary_df$time > 2,],
data = val_df,
times = eval_times
)
figures$decision_curve
source('pub_figures.R')
figures <- create_publication_figures(
baseline_model = baseline_model,
biomarker_model = model,
auc_summary = summary_df[summary_df$time > 2,],
data = val_df,
times = eval_times
)
figures$decision_curve
figures$calibration
figures$time_dependent_auc
figures$combined_plot
metrics_l$fold_1
dd <- plot_survival_metrics(metrics_l$fold_1)
dd$brier_plot
brier_df <- pec::ipcw(Surv(tstop, event) ~ 1, data = data, times = t)
brier_df <- pec::ipcw(Surv(tstop, event) ~ 1, data = data, times = t,  method = "marginal")
data <- val_df
brier_df <- pec::ipcw(Surv(tstop, event) ~ 1, data = data, times = t,  method = "marginal")
t
t <- times[1]
t
brier_df <- pec::ipcw(Surv(tstop, event) ~ 1, data = data, times = t,  method = "marginal")
brier_base <- pec::pec(list("baseline" = baseline_model),
formula = Surv(tstop, event) ~ 1,
data = data, times = t)$AppErr$baseline
brier_base
brier_bio <- pec::pec(list("biomarker" = biomarker_model),
formula = Surv(tstop, event) ~ 1,
data = data, times = t)$AppErr$biomarker
biomarker_model <- model
brier_bio <- pec::pec(list("biomarker" = biomarker_model),
formula = Surv(tstop, event) ~ 1,
data = data, times = t)$AppErr$biomarker
brier_scores[[as.character(t)]] <- c(baseline = brier_base, biomarker = brier_bio)
brier_scores <- list()
brier_scores[[as.character(t)]] <- c(baseline = brier_base, biomarker = brier_bio)
source('pub_figures.R')
source('pub_figures.R')
figures <- create_publication_figures(
baseline_model = baseline_model,
biomarker_model = model,
auc_summary = summary_df[summary_df$time > 2,],
data = val_df,
times = eval_times
)
source('pub_figures.R')
figures <- create_publication_figures(
baseline_model = baseline_model,
biomarker_model = model,
auc_summary = summary_df[summary_df$time > 2,],
data = val_df,
times = eval_times
)
figures$calibration
debugonce(create_publication_figures)
source('pub_figures.R')
figures <- create_publication_figures(
baseline_model = baseline_model,
biomarker_model = model,
auc_summary = summary_df[summary_df$time > 2,],
data = val_df,
times = eval_times
)
debugonce(create_publication_figures)
figures <- create_publication_figures(
baseline_model = baseline_model,
biomarker_model = model,
auc_summary = summary_df[summary_df$time > 2,],
data = val_df,
times = eval_times
)
head(brier_df)
head(brier_base)
brier_base
brier_bio
brier_scores$`3`
brier_scores$`3`['baseline']
brier_base
brier_base
head(brier_scores$`3`)
dim(brier_scores$`3`)
brier_scores$`3`
length(brier_scores$`3`)
brier_scores[[as.character(t)]] <- data.frame(
baseline = brier_base,
biomarker = brier_bio
)
source('pub_figures.R')
figures <- create_publication_figures(
baseline_model = baseline_model,
biomarker_model = model,
auc_summary = summary_df[summary_df$time > 2,],
data = val_df,
times = eval_times
)
figures$calibration
debugonce(create_publication_figures)
source('pub_figures.R')
figures <- create_publication_figures(
baseline_model = baseline_model,
biomarker_model = model,
auc_summary = summary_df[summary_df$time > 2,],
data = val_df,
times = eval_times
)
source('pub_figures.R')
figures <- create_publication_figures(
baseline_model = baseline_model,
biomarker_model = model,
auc_summary = summary_df[summary_df$time > 2,],
data = val_df,
times = eval_times
)
warnings()
debugonce(create_publication_figures)
figures <- create_publication_figures(
baseline_model = baseline_model,
biomarker_model = model,
auc_summary = summary_df[summary_df$time > 2,],
data = val_df,
times = eval_times
)
val_bio
val_base$Brier$score
mean(val_base$Brier$score)
dim(val_base$Brier$score)
colnames(val_base$Brier$score)
# Calculate mean Brier score over time points
ibs_base <- mean(val_base$Brier$score[val_base$Brier$model == "coxph"])
# Calculate mean Brier score over time points
ibs_base <- mean(val_base$Brier$score[val_base$Brier$model == "coxph", "Brier"])
ibs_bio <- mean(val_bio$Brier$score[val_bio$Brier$model == "coxph", "Brier"])
# Calculate mean Brier score over time points
ibs_base <- mean(val_base$Brier$score[val_base$Brier$model == "coxph",]$Brier)
ibs_bio <- mean(val_bio$Brier$score[val_bio$Brier$model == "coxph",]$Brier)
ibs_base
val_base$Brier$score[val_base$Brier$model == "coxph",]
val_base$Brier$score
# Calculate mean Brier score over time points
ibs_base <- mean(val_base$Brier$score[val_base$Brier$score$model == "coxph",]$Brier)
ibs_base
# Calculate mean Brier score over time points
ibs_base <- mean(val_base$Brier$score[val_base$Brier$score$model == "coxph", "Brier"])
# Calculate mean Brier score over time points
ibs_base <- mean(val_base$Brier$score[val_base$Brier$score$model == "coxph",]$Brier)
ibs_bio <- mean(val_bio$Brier$score[val_bio$Brier$score$model == "coxph",]$Brier)
ibs_base
ibs_bio
source('pub_figures.R')
figures <- create_publication_figures(
baseline_model = baseline_model,
biomarker_model = model,
auc_summary = summary_df[summary_df$time > 2,],
data = val_df,
times = eval_times
)
Q
Q
Q
source('pub_figures.R')
figures <- create_publication_figures(
baseline_model = baseline_model,
biomarker_model = model,
auc_summary = summary_df[summary_df$time > 2,],
data = val_df,
times = eval_times
)
figures$calibration
source('pub_figures.R')
figures <- create_publication_figures(
baseline_model = baseline_model,
biomarker_model = model,
auc_summary = summary_df[summary_df$time > 2,],
data = val_df,
times = eval_times
)
figures$calibration
figures$time_dependent_auc
figures$decision_curve
figures$combined_plot
source('pub_figures.R')
figures <- create_publication_figures(
baseline_model = baseline_model,
biomarker_model = model,
auc_summary = summary_df[summary_df$time > 2,],
data = val_df,
times = eval_times
)
figures$calibration
debugonce(create_publication_figures)
figures <- create_publication_figures(
baseline_model = baseline_model,
biomarker_model = model,
auc_summary = summary_df[summary_df$time > 2,],
data = val_df,
times = eval_times
)
calibration$all_plots
calibration$final_plot
calibration$all_plots
Q
Q
Q
source('pub_figures.R')
figures <- create_publication_figures(
baseline_model = baseline_model,
biomarker_model = model,
auc_summary = summary_df[summary_df$time > 2,],
data = val_df,
times = eval_times
)
figures$calibration
debugonce(create_publication_figures)
figures <- create_publication_figures(
baseline_model = baseline_model,
biomarker_model = model,
auc_summary = summary_df[summary_df$time > 2,],
data = val_df,
times = eval_times
)
plots <- list()
final_plots <- NULL
brier_scores <- list()
for(t in times) {
# Calculate integrated Brier score up to time t
val_base <- riskRegression::Score(
list(baseline_model),
formula = Surv(tstop, event) ~ 1,
data = data,
metrics = "brier",
times = seq(0, t, length.out = 100)  # Integrate over time points
)
val_bio <- riskRegression::Score(
list(biomarker_model),
formula = Surv(tstop, event) ~ 1,
data = data,
metrics = "brier",
times = seq(0, t, length.out = 100)
)
# Calculate mean Brier score over time points
ibs_base <- mean(val_base$Brier$score[val_base$Brier$score$model == "coxph",]$Brier)
ibs_bio <- mean(val_bio$Brier$score[val_bio$Brier$score$model == "coxph",]$Brier)
brier_scores[[as.character(t)]] <- data.frame(
baseline = ibs_base,
biomarker = ibs_bio
)
cal_data <- data.frame()
# Get data for both models
for(model_info in list(
list(model = baseline_model, name = "Baseline", color = model_colors["Baseline"]),
list(model = biomarker_model, name = "Biomarker", color = model_colors["Biomarker"])
)) {
pred_probs <- 1 - pec::predictSurvProb(model_info$model, newdata = data, times = t)
n_groups <- 10
risk_groups <- cut(pred_probs,
breaks = quantile(pred_probs, probs = seq(0, 1, length.out = n_groups + 1)),
include.lowest = TRUE)
for (group in levels(risk_groups)) {
group_data <- data[risk_groups == group,]
if(nrow(group_data) > 0) {
surv_fit <- survfit(Surv(tstop, event) ~ 1, data = group_data)
surv_summary <- summary(surv_fit, times = t)
if(length(surv_summary$surv) > 0) {
cal_data <- rbind(cal_data, data.frame(
model = model_info$name,
risk_group = group,
pred = mean(pred_probs[risk_groups == group]),
actual = 1 - surv_summary$surv[1]
))
}
}
}
}
# Inside the for loop, after creating cal_data:
is_leftmost <- as.numeric(t) %in% c(3,6)  # Assuming times are 3,4,5,6,7,8
is_bottom <- as.numeric(t) >= 6
is_middle_bottom <- t == 7  # Middle panel of bottom row
# set axis limits
max_limit <- max(max(cal_data$pred), max(cal_data$actual)) * 1.05
current_plot <- ggplot(cal_data, aes(x = pred, y = actual, color = model)) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray50") +
geom_point(size = 3) +
geom_line() +
scale_color_manual(values = model_colors, name = "Model") +
labs(x = if(is_bottom) "Predicted Probability" else "",
y = if(is_leftmost) "Observed Probability" else "",
title = paste0(t, " years\n",
"IBS - Baseline: ", round(brier_scores[[as.character(t)]]["baseline"], 3),
"\nBiomarker: ", round(brier_scores[[as.character(t)]]["biomarker"], 3))) +
coord_equal(xlim = c(0, max_limit),
ylim = c(0, max_limit)) +
publication_theme +
theme(legend.position = if(is_middle_bottom) "bottom" else "none")
plots[[as.character(t)]] <- current_plot
if(t == tail(times, 1)) {
final_plots <- current_plot
}
return(list(
all_plots = wrap_plots(plots, ncol = 3),
final_plot = final_plots
))
}
Q
Q
Q
Q
source('pub_figures.R')
source('pub_figures.R')
figures <- create_publication_figures(
baseline_model = baseline_model,
biomarker_model = model,
auc_summary = summary_df[summary_df$time > 2,],
data = val_df,
times = eval_times
)
figures$calibration
source('pub_figures.R')
figures <- create_publication_figures(
baseline_model = baseline_model,
biomarker_model = model,
auc_summary = summary_df[summary_df$time > 2,],
data = val_df,
times = eval_times
)
figures$calibration
source('pub_figures.R')
figures <- create_publication_figures(
baseline_model = baseline_model,
biomarker_model = model,
auc_summary = summary_df[summary_df$time > 2,],
data = val_df,
times = eval_times
)
figures$calibration
figures$time_dependent_auc
figures$decision_curve
figures$combined_plot
figures$time_dependent_auc
figures$calibration
figures$decision_curve
# additional
# Use the function
additional_figures <- create_additional_figures(
baseline_model = baseline_model,
biomarker_model = model,
data = td_data,
times = eval_times
)
